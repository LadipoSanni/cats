name: CI/CD Deployment

on:
  push:
    branches:
      - dev
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"
  S3_BUCKET: "terraform-state-bucket"
  ANSIBLE_DIR: "ansible"
  TERRAFORM_DIR: "terraform"
  APP_NAME: "sinatra-app"
  DEPLOY_GROUP_NAME: "sinatra-deploy-group"
  VERSION_TAG: "v1.0.0"

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  tag_version:
    name: Tag Version
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a ${{ env.VERSION_TAG }} -m "Release ${{ env.VERSION_TAG }}"
          git push origin ${{ env.VERSION_TAG }}

  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: tag_version
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform init -backend-config="bucket=${{ env.S3_BUCKET }}" \
                         -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform apply -auto-approve

  ansible:
    name: Deploy with Ansible
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Deploy Application
        working-directory: ${{ env.ANSIBLE_DIR }}
        run: |
          ansible-playbook -i inventory main.yml

  health_check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: ansible
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Application Health
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://YOUR-ALB-DNS-NAME/)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Health check failed. Expected 200, got $RESPONSE"
            exit 1
          fi
          echo "Health check passed."

  deploy:
    name: Blue/Green Deployment
    runs-on: ubuntu-latest
    needs: health_check
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Execute Blue/Green Deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.APP_NAME }} \
            --deployment-group-name ${{ env.DEPLOY_GROUP_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=${{ env.S3_BUCKET }},bundleType=zip,key=deploy.zip

  canary:
    name: Canary Deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy Version 2.0.1 using Canary
        run: |
          aws deploy create-deployment \
            --application-name "${{ env.APP_NAME }}" \
            --deployment-group-name "${{ env.DEPLOY_GROUP_NAME }}" \
            --deployment-config-name "CodeDeployDefault.OneAtATime" \
            --s3-location bucket=${{ env.S3_BUCKET }},bundleType=zip,key=deploy.zip

      - name: Verify Deployment Health
        run: |
          curl -f http://your-app-url/health || exit 1

      - name: Rollback on Failure
        if: failure()
        run: |
          ansible-playbook -i inventory rollback.yml
